<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Li&#39;s Note</title>
  
  <subtitle>人生到处知何似，应似飞鸿踏雪泥</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luciolee.github.io/"/>
  <updated>2019-09-16T10:30:05.000Z</updated>
  <id>https://luciolee.github.io/</id>
  
  <author>
    <name>影痕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一章 Hello, RxSwift!</title>
    <link href="https://luciolee.github.io/2019/09/30/rxswift-yi-wen/chapter1-hello-rxswift/"/>
    <id>https://luciolee.github.io/2019/09/30/rxswift-yi-wen/chapter1-hello-rxswift/</id>
    <published>2019-09-30T09:52:22.000Z</published>
    <updated>2019-09-16T10:30:05.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这本书的目的是向读者介绍 &lt;em&gt;RxSwift&lt;/em&gt; 库，以及如何使用 &lt;em&gt;Swift&lt;/em&gt; 编写响应式 &lt;em&gt;iOS&lt;/em&gt; 应用程序。&lt;/p&gt;
&lt;p&gt;“但什么是 &lt;em&gt;RxSwift&lt;/em&gt; 呢？”
        
      
    
    </summary>
    
    
      <category term="Swift响应式编程" scheme="https://luciolee.github.io/categories/Swift%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="响应式编程" scheme="https://luciolee.github.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="RxSwift" scheme="https://luciolee.github.io/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>第六章 函数式编程(Functional Programming)</title>
    <link href="https://luciolee.github.io/2019/09/16/pro-swift-yi-wen/chapter6-functional-programming/"/>
    <id>https://luciolee.github.io/2019/09/16/pro-swift-yi-wen/chapter6-functional-programming/</id>
    <published>2019-09-16T10:25:00.000Z</published>
    <updated>2019-09-16T10:26:55.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;如果需要每个元素的索引及其值，可以使用&lt;code&gt;enumerated()&lt;/code&gt;方法遍历数组：&lt;/p&gt;
&lt;pre class=&quot; language-swift&quot;&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;token
        
      
    
    </summary>
    
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/categories/Pro-Swift/"/>
    
    
      <category term="Swift" scheme="https://luciolee.github.io/tags/Swift/"/>
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/tags/Pro-Swift/"/>
    
      <category term="函数式编程" scheme="https://luciolee.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第五章 错误处理(Errors)</title>
    <link href="https://luciolee.github.io/2019/09/06/pro-swift-yi-wen/chapter5-errors/"/>
    <id>https://luciolee.github.io/2019/09/06/pro-swift-yi-wen/chapter5-errors/</id>
    <published>2019-09-06T13:59:00.000Z</published>
    <updated>2019-09-07T10:06:04.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;你可以扩展集合，使其具有安全的下标，当值不存在时返回&lt;code&gt;nil&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot; language-swift&quot;&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;token
        
      
    
    </summary>
    
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/categories/Pro-Swift/"/>
    
    
      <category term="Swift" scheme="https://luciolee.github.io/tags/Swift/"/>
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/tags/Pro-Swift/"/>
    
      <category term="错误处理" scheme="https://luciolee.github.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
      <category term="断言" scheme="https://luciolee.github.io/tags/%E6%96%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>第四章 函数(Functions)</title>
    <link href="https://luciolee.github.io/2019/09/06/pro-swift-yi-wen/chapter4-functions/"/>
    <id>https://luciolee.github.io/2019/09/06/pro-swift-yi-wen/chapter4-functions/</id>
    <published>2019-09-06T08:59:00.000Z</published>
    <updated>2019-09-07T10:05:57.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;当编写代码在两个数字之间进行插值时，很容易默认为线性插值。然而，在两个值之间平稳过渡通常会更好。所以我的建议是避免步进，并使用函数(如&lt;code&gt;smooterstep()&lt;/code&gt;)进行插值：&lt;/p&gt;
&lt;pre class=&quot;
        
      
    
    </summary>
    
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/categories/Pro-Swift/"/>
    
    
      <category term="Swift" scheme="https://luciolee.github.io/tags/Swift/"/>
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/tags/Pro-Swift/"/>
    
      <category term="操作符重载" scheme="https://luciolee.github.io/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>第三章 引用类型和值类型(References and Values)</title>
    <link href="https://luciolee.github.io/2019/09/05/pro-swift-yi-wen/chapter3-references-and-values/"/>
    <id>https://luciolee.github.io/2019/09/05/pro-swift-yi-wen/chapter3-references-and-values/</id>
    <published>2019-09-05T02:59:00.000Z</published>
    <updated>2019-09-07T10:05:51.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;下次发生崩溃时，请按照以下说明正确解决问题：单击线程中的  &lt;code&gt;objc_exception_throw&lt;/code&gt;，然后在调试区域键入&lt;code&gt;po $arg1&lt;/code&gt;以获取错误的可读版本。如果你使用异常断点，你甚至可以在那里添加&lt;code&gt;po
        
      
    
    </summary>
    
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/categories/Pro-Swift/"/>
    
    
      <category term="Swift" scheme="https://luciolee.github.io/tags/Swift/"/>
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/tags/Pro-Swift/"/>
    
  </entry>
  
  <entry>
    <title>第二章 类型（Types）</title>
    <link href="https://luciolee.github.io/2019/09/04/pro-swift-yi-wen/chapter2-types/"/>
    <id>https://luciolee.github.io/2019/09/04/pro-swift-yi-wen/chapter2-types/</id>
    <published>2019-09-04T11:59:00.000Z</published>
    <updated>2019-09-07T10:05:45.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我最喜欢的 &lt;em&gt;Swift&lt;/em&gt; 单行代码是使用&lt;code&gt;flatMap()&lt;/code&gt;来对一个数组进行降维和过滤：&lt;/p&gt;
&lt;pre class=&quot; language-swift&quot;&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/categories/Pro-Swift/"/>
    
    
      <category term="Swift" scheme="https://luciolee.github.io/tags/Swift/"/>
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/tags/Pro-Swift/"/>
    
      <category term="范型" scheme="https://luciolee.github.io/tags/%E8%8C%83%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>第一章 语法（Syntax）</title>
    <link href="https://luciolee.github.io/2019/09/03/pro-swift-yi-wen/chapter1-syntax/"/>
    <id>https://luciolee.github.io/2019/09/03/pro-swift-yi-wen/chapter1-syntax/</id>
    <published>2019-09-03T11:43:22.000Z</published>
    <updated>2019-09-07T10:05:33.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;当知道不需要重写声明时，对属性和方法使用&lt;code&gt;final&lt;/code&gt;。 这允许编译器用直接调用替换动态派发调用。甚至可以通过将属性附加到类本身，将整个类标记为&lt;code&gt;final&lt;/code&gt;。&lt;br&gt;– &lt;em&gt;Wendy Lu
        
      
    
    </summary>
    
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/categories/Pro-Swift/"/>
    
    
      <category term="Swift" scheme="https://luciolee.github.io/tags/Swift/"/>
    
      <category term="Pro Swift" scheme="https://luciolee.github.io/tags/Pro-Swift/"/>
    
      <category term="模式匹配" scheme="https://luciolee.github.io/tags/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
</feed>
